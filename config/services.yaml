# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    admin.projet:
        class: App\Admin\ProjetAdmin
        arguments: [~, App\Entity\Projet, ~]
        tags:
          - {name: sonata.admin, manager_type: orm, group: Projet, label: Projet}

    admin.client:
            class: App\Admin\ClientAdmin
            arguments: [~, App\Entity\Client, ~]
            tags:
              - {name: sonata.admin, manager_type: orm, group: Client, label: Client}

    admin.facture:
                class: App\Admin\FactureAdmin
                arguments: [~, App\Entity\Facture, ~]
                tags:
                  - {name: sonata.admin, manager_type: orm, group: Facture,  label: Facture}

    admin.service:
                class: App\Admin\ServiceAdmin
                arguments: [~, App\Entity\Service, ~  ]
                tags:
                  - {name: sonata.admin, manager_type: orm, group: Service,  label: Service}

    admin.user:
              class: App\Admin\UserAdmin
              arguments: [~, App\Entity\User, ~  ]
              tags:
                - {name: sonata.admin, manager_type: orm, group: User,  label: User}

    admin.metier:
              class: App\Admin\MetierAdmin
              arguments: [~, App\Entity\Metier, ~  ]
              tags:
                - {name: sonata.admin, manager_type: orm, Metier ,  label: Metier}

    admin.tache:
              class: App\Admin\TacheAdmin
              arguments: [~, App\Entity\Tache, ~  ]
              tags:
                - {name: sonata.admin, manager_type: orm, Tache ,  label: Tache}
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
