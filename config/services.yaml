# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    profile_images_directory: '%kernel.project_dir%/public/uploads/profile_images'


services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']
    App\Service\FileUploader:
        arguments:
            $targetDirectory: '%profile_images_directory%'

    admin.block.service.dashboard:
        class:  App\Service\DashboardBlockService
        arguments:
                - "admin.block.service.dashboard"
                - '@templating'
                - '@doctrine.orm.entity_manager'
        public: true
        tags:
            - { name: sonata.block }

    admin.block.service.agenda:
        class:  App\Service\AgendaBlockService
        arguments:
            - "admin.block.service.agenda"
            - "@templating.engine.twig"
            - "@doctrine.orm.default_entity_manager"
        public: true
        tags:
            - {name: sonata.block}
    admin.agenda:
        class:  App\Admin\AgendaAdmin
        arguments:
            - ~
            - ''
            - App\Controller\AgendaAdminController
        tags:
            - {name: sonata.admin, manager_type: orm,Groupe: Agenda,  label: Agenda,  icon: '<i class="fa fa-calendar menu-item-icon"></i>'}


    admin.projet:
        class: App\Admin\ProjetAdmin
        arguments:
            - ~
            - App\Entity\Projet
            - App\Controller\ProjetAdminController
        tags:
          - {name: sonata.admin, manager_type: orm, group: Projet, label: Projet}

    admin.client:
            class: App\Admin\ClientAdmin
            arguments: [~, App\Entity\Client, ~]
            tags:
              - {name: sonata.admin, manager_type: orm, group: Client, label: Client}

    admin.facture:
                class: App\Admin\FactureAdmin
                arguments: [~, App\Entity\Facture, ~]
                tags:
                  - {name: sonata.admin, manager_type: orm, group: Facture,  label: Facture}

    admin.service:
                class: App\Admin\ServiceAdmin
                arguments: [~, App\Entity\Service, ~  ]
                tags:
                  - {name: sonata.admin, manager_type: orm, group: Service,  label: Service}

    admin.user:
              class: App\Admin\UserAdmin
              arguments: [~, App\Entity\User, ~  ]

              tags:
                - {name: sonata.admin, manager_type: orm, group: User,  label: User}


    admin.metier:
              class: App\Admin\MetierAdmin
              arguments: [~, App\Entity\Metier, ~  ]
              tags:
                - {name: sonata.admin, manager_type: orm, Metier ,  label: Metier}

    admin.tache:
              class: App\Admin\TacheAdmin
              arguments: [~, App\Entity\Tache, ~  ]
              tags:
                - {name: sonata.admin, manager_type: orm, Tache ,  label: Tache}
    admin.image:
              class: App\Admin\ImageAdmin
              arguments: [~, App\Entity\Image, ~  ]
              tags:
                - {name: sonata.admin, manager_type: orm,  label: Image}

    admin.role:
              class: App\Admin\RoleAdmin
              arguments: [~, App\Entity\Role, ~  ]
              tags:
                - {name: sonata.admin, manager_type: orm,  label: Role}



    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
